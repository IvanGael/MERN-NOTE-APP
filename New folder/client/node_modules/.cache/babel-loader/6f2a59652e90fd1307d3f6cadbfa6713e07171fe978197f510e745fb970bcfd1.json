{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING, FETCH_POST, COMMENT } from \"../constants/actionTypes\";\nimport * as api from \"../api/index.js\";\n\n/*export const getPosts = () => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.fetchPosts()\r\n\r\n    dispatch({ type: FETCH_ALL, payload: data })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}*/\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    //console.log(data)\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    //console.log(data)\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    //console.log(data)\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n\n    // yasle chai details page layera janxa\n    history.push(`/posts/${data._id}`);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// comment\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    });\n    return data.comments;\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","FETCH_BY_SEARCH","START_LOADING","END_LOADING","FETCH_POST","COMMENT","api","getPost","id","dispatch","type","data","fetchPost","payload","error","console","log","getPosts","page","fetchPosts","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","history","push","_id","updatePost","likePost","user","JSON","parse","localStorage","getItem","token","deletePost","commentPost","value","comment","comments"],"sources":["C:/Users/user/OneDrive/Bureau/Mes projets/React/MERN-NOTE-APP-FINAL/New folder/client/src/actions/posts.js"],"sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING, FETCH_POST, COMMENT } from \"../constants/actionTypes\"\r\nimport * as api from \"../api/index.js\"\r\n\r\n/*export const getPosts = () => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.fetchPosts()\r\n\r\n    dispatch({ type: FETCH_ALL, payload: data })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}*/\r\nexport const getPost = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING })\r\n    const { data } = await api.fetchPost(id)\r\n    //console.log(data)\r\n    dispatch({ type: FETCH_POST, payload: data })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nexport const getPosts = (page) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING })\r\n    const { data } = await api.fetchPosts(page)\r\n    //console.log(data)\r\n    dispatch({ type: FETCH_ALL, payload: data })\r\n    dispatch({ type: END_LOADING })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING })\r\n    const {\r\n      data: { data },\r\n    } = await api.fetchPostsBySearch(searchQuery)\r\n    dispatch({ type: FETCH_BY_SEARCH, payload: data })\r\n    //console.log(data)\r\n    dispatch({ type: END_LOADING })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport const createPost = (post, history) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING })\r\n    const { data } = await api.createPost(post)\r\n\r\n    // yasle chai details page layera janxa\r\n    history.push(`/posts/${data._id}`)\r\n\r\n    dispatch({ type: CREATE, payload: data })\r\n    dispatch({ type: END_LOADING })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post)\r\n\r\n    dispatch({ type: UPDATE, payload: data })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n  const user = JSON.parse(localStorage.getItem(\"profile\"))\r\n\r\n  try {\r\n    const { data } = await api.likePost(id, user?.token)\r\n\r\n    dispatch({ type: LIKE, payload: data })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await await api.deletePost(id)\r\n\r\n    dispatch({ type: DELETE, payload: id })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n// comment\r\nexport const commentPost = (value, id) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.comment(value, id)\r\n    dispatch({ type: COMMENT, payload: data })\r\n    return data.comments\r\n    console.log(data)\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}